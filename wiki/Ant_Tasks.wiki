#summary JastEMF's Ant user interface.
#labels Featured

= Basic User Interface =

Users interact with JastEMF in a black-box manner via a single Ant task --- the `jastemf` task. The complete integration process is started by calling the task and afterwards handled automatically by JastEMF. The task is registered in Eclipse by the JastEMF plugin, if it is [Installation correctly deployed].

Besides the `jastemf` task, which starts the generation of a semantics integrated metamodel implementation based on an Ecore metamodel and a !JastAdd reference attribute grammar (RAG), also [http://jastadd.org/jastadd-reference-manual/running-jastadd-under-eclipse#ANT JastAdd's original Ant task] is provided by JastEMF.

== `jastemf` Task ==

The task is configurated with the generator model to use (`genmodel`), the package for the generated integration artefacts (`outpackage`), the package for the !JastAdd generated AST classes (`astpackage`), optional arguments for !JastAdd (`jastadd`) and arbitrary many filesets containing the semantic specifications. The optional arguments can be any option known by [http://jastadd.org/jastadd-reference-manual/running-jastadd-from-the-command-line JastAdd's command line interface] and are used to configure !JastAdd when internally called by JastEMF throughout the integration process.

{{{
<jastemf
    genmodel="path/to/the/ecore/generator/model/to/use/modelname.genmodel"
    outpackage="package.for.the.integration.artifacts.generated.by.jastemf"
    astpackage="package.for.the.ast.classes.generated.by.jastadd"
    jastadd="optional JastAdd command line options">
    <fileset dir="base/directory/containing/jastadd/semantic/specifications">
        <include name="**/*.ast"/>
        <include name="**/*.jrag"/>
        <include name="**/*.jadd"/>
    </fileset>
</jastemf>
}}}

The embedded !JastAdd call has not to specify the AST classes' package and output directory again. Also the `--rewrite` flag is always set by JastEMF.

Ant build scripts using JastEMF must be executed within the same JRE as Eclipse (Select _Run => External Tools => External Tools Configurations =>_ select the Ant build script containing the `jastemf` task _=> JRE => Run in the same JRE as the workspace_).

*IMPORTANT NOTE*: This task requires some time. JastEMF uses complex Eclipse-based refactorings to merge the class hierarchies and this is slow. Future versions may provide a much faster implementation. 

== `jastadd` Task ==

JastEMF also provides the [http://jastadd.org/jastadd-reference-manual/running-jastadd-under-eclipse#ANT Ant user interface known from JastAdd]. The only difference is, that the `jastadd` task is registered by the JastEMF plugin in Eclipse, such that it can be used in Ant build scripts without being explicitely defined.

= The Converter's User Interface =

The JastEMF Converter plug-in provides some automated ANT tasks that allow to derive attribute grammar stubs from a given Ecore model or the derive a corresponding Ecore model from a set of attribute grammar specifications.

== `jastemf.ecore2ast` Task ==
This task allows you to derive AST grammars from a given metamodel. The metamodel must be revealed by the task's modelFile parameter. The transformation result is stored in the directory passed via outputDirectory to the task. Note that each EPackage in the provided model will get its own AST file, which is named like the package.

{{{
<jastemf.ecore2ast
	modelFile="your/model/directory/yourmodel.ecore"
	outputDirectory="target/directory/for/derived/ast/specs">
</jastemf.ecore2ast>
}}}

The resulting AST specifications correspond to the syntactic interface, i.e. the containment hierarchy of the given metamodel.

== `jastemf.ecore2jrag` Task ==
This task derives a set of very basic attibute declrations from a given metamodel. The specification has to be completed manually to form a usable attribution.

{{{
<jastemf.ecore2jrag
	modelFile="your/model/directory/yourmodel.ecore"
	outputDirectory="target/directory/for/derived/jrag/specs">
</jastemf.ecore2jrag>
}}}

The resulting specifications correspond to the semantic interface of the metamodel, i.e., its non-containment EReferences, derived EAttributes EOperations and derived containment EReferences.