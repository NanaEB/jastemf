#summary JastEMF's Ant user interface.
#labels Featured

= Basic User Interface =

Users interact with JastEMF in a black-box manner via a single Ant task --- the `jastemf` task. The complete integration process is started by calling the task and afterwards handled automatically by JastEMF. The task is registered in Eclipse by the JastEMF plugin, if it is [Installation correctly deployed].

Besides the `jastemf` task, which starts the generation of a semantics integrated metamodel implementation based on an Ecore metamodel and a !JastAdd reference attribute grammar (RAG), also [http://jastadd.org/jastadd-reference-manual/running-jastadd-under-eclipse#ANT JastAdd's original Ant task] is provided by JastEMF.

== `jastemf` Task ==

The task is configurated with the generator model to use (`genmodel`), the package for the generated integration artefacts (`outpackage`), the package for the !JastAdd generated AST classes (`astpackage`), optional arguments for !JastAdd (`jastadd`) and arbitrary many filesets containing the semantic specifications. The optional arguments can be any option known by [http://jastadd.org/jastadd-reference-manual/running-jastadd-from-the-command-line JastAdd's command line interface] and are used to configure !JastAdd when internally called by JastEMF throughout the integration process.

{{{
<jastemf
    genmodel="path/to/the/ecore/generator/model/to/use/modelname.genmodel"
    outpackage="package.for.the.integration.artifacts.generated.by.jastemf"
    astpackage="package.for.the.ast.classes.generated.by.jastadd"
    jastadd="optional JastAdd command line options">
    <fileset dir="base/directory/containing/jastadd/semantic/specifications">
        <include name="**/*.ast"/>
        <include name="**/*.jrag"/>
        <include name="**/*.jadd"/>
    </fileset>
</jastemf>
}}}

The embedded !JastAdd call has not to specify the AST classes' package and output directory again. Also the `--rewrite` flag is always set by JastEMF.

Ant build scripts using JastEMF must be executed within the same JRE as Eclipse (Select _Run => External Tools => External Tools Configurations =>_ select the Ant build script containing the `jastemf` task _=> JRE => Run in the same JRE as the workspace_).

== `jastadd` Task ==

JastEMF also provides the [http://jastadd.org/jastadd-reference-manual/running-jastadd-under-eclipse#ANT Ant user interface known from !JastAdd]. The only difference is, that the `jastadd` task is registered by the JastEMF plugin in Eclipse, such that it can be used in Ant build scripts without being explicitely defined.

= The Converter's User Interface =